<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
    xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/mvc
		http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx.xsd">

	<!-- Add support for component scanning -->
	<context:component-scan base-package="spring" /> <!-- this is package scanning for our controllers -->

	<!-- Add support for conversion, formatting and validation support -->
	<mvc:annotation-driven/> 

	<!-- Define Spring MVC view resolver -->
	<!-- Spring should look for view jsp pages in /WEB-INF/view/ and add suffix .jsp -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/view/" />
		<property name="suffix" value=".jsp" />
	</bean>

    <!-- Define Database DataSource / connection pool -->
    <!-- This is used to specify to which database should Hibernate connect -->
	<bean id="myDataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="driverClass" value="oracle.jdbc.driver.OracleDriver" />
        <property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:xe" />
        <property name="user" value="system" />
        <property name="password" value="milos" /> 

        <!-- these are connection pool properties for C3P0 -->
		<property name="initialPoolSize" value="5"/>
        <property name="minPoolSize" value="5" />
        <property name="maxPoolSize" value="20" />
        <property name="maxIdleTime" value="30000" />
	</bean>  
	
    <!-- Setup Hibernate session factory -->
    <!-- session factory is what Hibernate uses to connect to the database-->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<property name="dataSource" ref="myDataSource" /> <!-- myDataSource is the DataSource defined in previous bean -->

		<property name="packagesToScan" value="spring.entity" /> <!-- here we are giving the package name where spring should look for entity classes / which packages to scan -->
		<property name="hibernateProperties">
		   <props>
		      <prop key="hibernate.dialect">org.hibernate.dialect.Oracle8iDialect</prop> <!-- Hibernate should use Oracle dialect -->
		      <prop key="hibernate.show_sql">true</prop> <!-- giving instructions to Hibernate to show SQL -->
		   </props>
		</property>
   </bean>	  

    <!-- Setup Hibernate transaction manager -->
    <!-- Hibernate uses Transactions ... so by adding this bean we don't need to give Hibernate instructions in our DAO classes when should start and end transactions  -->
	<bean id="myTransactionManager"
            class="org.springframework.orm.hibernate5.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"/> <!-- here we are referencing sessionFactory - previous bean -->
    </bean>
    
    <!-- Enable configuration of transactional behavior based on annotations, so our transactions will be annotation driven -->
    <!-- this allows us to use @Transactional annotation -->
	<tx:annotation-driven transaction-manager="myTransactionManager" /> <!--id of previous bean  -->

	<!-- Add support for reading web resources: css, images, js, etc ... -->
	<mvc:resources location="/resources/" mapping="/resources/**"></mvc:resources>
	
	
	
</beans>











